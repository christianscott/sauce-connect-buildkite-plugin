#!/bin/bash
set -euo pipefail

# Allow to pass TMP_DIR for testing purposes
if [[ -z "${TMP_DIR:-}" ]]; then
  TMP_DIR=$(mktemp -d -t sauce-connect-buildkite-plugin.XXXXXXXXXX)
  function cleanup {
    echo "Cleaning up ${TMP_DIR}"
    rm -rf "${TMP_DIR}"
  }
else
  function cleanup {
    echo "Not removing given TMP_DIR (${TMP_DIR})"
  }
fi
trap halt_sc EXIT

# See https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy
DEFAULT_SAUCE_CONNECT_VERSION="4.5.0"

error() {
  local message="$1"
  echo "^^^ +++"
  echo "+++ :saucelabs: [sauce-connect] Error: ${message}" >&2
  exit 1  
}

check_set() {
  local name="$1"
  if [[ -z "${!name:-}" ]]; then
    error "${name} not set"
  fi
}

maybe_download_sc() {
  local sauce_connect_version="$1"

  pushd "${TMP_DIR}" >/dev/null
  if [[ -e "./sc" ]]; then
    return
  fi
  local os
  case "${OSTYPE}" in
    linux*)
      os="linux"
      curl -fsSL "https://saucelabs.com/downloads/sc-${sauce_connect_version}-${os}.tar.gz" | tar -xzf - "sc-${sauce_connect_version}-${os}/bin/sc"
      mv "./sc-${sauce_connect_version}-${os}/bin/sc" ./sc
      rm -rf "./sc-${sauce_connect_version}-${os}/bin"
    ;;
    darwin*)
      os="osx"
      curl -fsSL -o sc.zip "https://saucelabs.com/downloads/sc-${sauce_connect_version}-${os}.zip"
      unzip -p sc.zip "sc-${sauce_connect_version}-${os}/bin/sc" > ./sc
      rm sc.zip
      chmod +x ./sc
    ;;
    *) error "unknown OS: ${OSTYPE}" ;;
  esac

  popd >/dev/null
}

main() {
  check_set SAUCE_USERNAME
  check_set SAUCE_ACCESS_KEY
  [[ -z "${BUILDKITE_PLUGIN_SAUCE_CONNECT_TUNNEL_IDENTIFIER:-}" ]] && check_set BUILDKITE_JOB_ID

  local tunnel_identifier="${BUILDKITE_PLUGIN_SAUCE_CONNECT_TUNNEL_IDENTIFIER:-${BUILDKITE_JOB_ID}}"
  local sauce_connect_version="${BUILDKITE_PLUGIN_SAUCE_CONNECT_SAUCE_CONNECT_VERSION:-${DEFAULT_SAUCE_CONNECT_VERSION}}"

  maybe_download_sc "${sauce_connect_version}"

  # shellcheck disable=SC2153
  sc3 \
    "${tunnel_identifier}" \
    "${SAUCE_USERNAME}" \
    "${SAUCE_ACCESS_KEY}"

  run_buildkite_command
}

halt_sc() {
  echo "--- :saucelabs: [sauce-connect] Stopping"

  pushd "${TMP_DIR}" >/dev/null
  local find_pidfiles
  find_pidfiles=$(find . -maxdepth 1 -name 'pid.*' -type f)

  local pidfile
  while read -r pidfile; do
    if [[ -e "${pidfile}" ]]; then
      local pid
      pid=$(cat "${pidfile}")
      kill -SIGINT "${pid}" || true
      local counter=0
      while is_pid_alive "${pid}"; do
        sleep 1
        counter=$((counter+1))
        if [[ "${counter}" -gt 60 ]]; then
          # try to kill again after a minute
          kill -SIGINT "${pid}" || true
        fi
      done
      echo
    fi
  done <<< "${find_pidfiles}"
  popd >/dev/null
  cleanup
}

run_buildkite_command() {
  if [[ -n "${BUILDKITE_COMMAND:-}" ]]; then
    echo "--- :saucelabs: [sauce-connect] Running command"
    echo "Command: ${BUILDKITE_COMMAND}"
    echo
    bash -c "${BUILDKITE_COMMAND}"
  fi
}

sc3() {
  if ! (sc1 1 "$@" || sc1 2 "$@" || sc1 3 "$@") ; then
    upload_sauce_connect_logs
    error "Failed to connect!"
  fi
}

sc1() {
  local attempt="$1"
  local tunnel_identifier="$2"
  local sauce_username="$3"
  local sauce_access_key="$4"

  echo "--- :saucelabs: [sauce-connect] Starting (Attempt ${attempt})"
  local readyfile="${TMP_DIR}/ready.${attempt}"
  local pidfile="${TMP_DIR}/pid.${attempt}"

  pushd "${TMP_DIR}" >/dev/null

  # TODO: find a better way to stub ./sc
  if [[ -z "${IS_UNDER_TEST:-}" ]]; then
    export PATH="${TMP_DIR}:${PATH}"
  fi
  sc \
    -u "${sauce_username}" \
    -k "${sauce_access_key}" \
    --tunnel-identifier "${tunnel_identifier}" \
    --readyfile "${readyfile}" \
    --pidfile "${pidfile}" \
    --logfile "${TMP_DIR}/sauce-connect.${attempt}.log" \
    --verbose \
    &
  
  local pid="$!"

  popd >/dev/null
  
  if ! wait_for_readyfile "${readyfile}" "${pid}"; then
    echo
    echo "Warning: sauce-connect timed out!"
    return 1
  else
    echo
    echo 'Success: sauce-connect is up \o/'
  fi
}

is_pid_alive() {
  local pid="$1"
  kill -0 "${pid}" >/dev/null 2>&1
}

wait_for_readyfile() {
  local readyfile="$1"
  local pid="$2"
  local i=0
  local sleep_time_seconds=2
  local max_wait_seconds=120
  while [[ "${i}" -lt "$((max_wait_seconds/sleep_time_seconds))" ]] \
     && [[ ! -e "${readyfile}" ]] \
     && is_pid_alive "${pid}" ; do
    i=$((i+1))
    sleep "${sleep_time_seconds}"
  done
  [[ -e "${readyfile}" ]]
}

upload_sauce_connect_logs() {
  pushd "${TMP_DIR}" >/dev/null
  echo "--- :saucelabs: [sauce-connect] Uploading logs"
  buildkite-agent artifact upload "sauce-connect.*.log"
  popd >/dev/null
}

main "$@"
